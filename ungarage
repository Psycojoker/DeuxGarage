#!/usr/bin/env python
# encoding: utf-8

import os
import sys
import traceback
import argh

from sh import ii, sleep, tail
from dateutil.parser import parse

NICK = "DeuxGarage"
SERVER = "irc.freenode.net"
FOLDER = "irc"
PORT = 6667


class Chan(object):
    def __init__(self, path):
        self.path = path
        self.name = path.split("/")[-1]

    def write(self, string):
        if not string.endswith("\n"):
            string += "\n"

        with open(os.path.join(self.path, "in"), "w") as chan:
            print [string]
            chan.write(string)

    def read_path(self):
        assert os.path.exists(os.path.join(self.path, "out"))
        print os.path.join(self.path, "out")
        return os.path.join(self.path, "out")


def parse_irc(path, nick, n):
    try:
        for line in tail("-f", path, n=n, _iter=True):
            date, time, nick, sentence = line.split(" ", 3)
            nick = nick[1:-1]
            if nick == NICK:  # I don't want to read myself
                continue

            yield parse(date + " " + time), nick, sentence
    except KeyboardInterrupt:
        return


def handle_commands(nick=NICK, chan="#lqdn-stalk", folder=FOLDER, server=SERVER, n=0):
    chan = Chan(os.path.join(folder, server, chan))
    for datetime, nick, sentence in parse_irc(path=chan.read_path(), nick=NICK, n=n):
        if sentence.startswith("!bouh"):
            chan.write("bah")


def join_irc(folder=FOLDER, server=SERVER, port=PORT, nick=NICK, full_name=NICK):
    while True:
        try:
            bot = ii(i=folder, s=server, p=port, n=nick, f=full_name, _bg=True)
            sleep(5)
            for chan in open("CHANS", "r"):
                print "Va joindre %s" % chan.strip()
                open("irc/irc.freenode.net/in", "w").write("/j %s\n" % chan.strip())
            bot.wait()
        except KeyboardInterrupt:
            print "end"
            return
        except Exception as e:
            traceback.print_exc(file=sys.stdout)
            print e

parser = argh.ArghParser()
parser.add_commands([join_irc, handle_commands])

if __name__ == '__main__':
    parser.dispatch()
